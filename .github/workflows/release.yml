# Copyright (c) Armidale Software
# SPDX-License-Identifier: MIT
#
# For documentation on the github environment, see
# https://docs.github.com/en/actions/using-github-hosted-runners/about-github-hosted-runners
#
# For documentation on the syntax of this file, see
# https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions
---
name: Release to github
on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'
  workflow_dispatch:

env:
  SOLUTION_FILE_PATH: Gedcom7.sln
  DOTNET_CORE_VERSION: 6.0.x
  BUILD_CONFIGURATION: Release

permissions:
  contents: write

jobs:
  deploy:
    runs-on: windows-2019
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@c6295a65d1254861815972266d5933fd6e532bdf  # v2.11.1
        with:
          egress-policy: audit

      - id: skip_check
        uses: fkirc/skip-duplicate-actions@v5
        with:
          cancel_others: 'false'
          paths_ignore: '["**.md"]'

      - uses: actions/checkout@eef61447b9ff4aafe5dcd4e0bbf5d482be7e7871  # v4.2.1
        if: steps.skip_check.outputs.should_skip != 'true'
        with:
          submodules: 'recursive'
          # fetch-depth of 0 means to fetch the entire history not just the latest commit,
          # and this is necessary when a workflow is triggered by something other than pushing a tag
          fetch-depth: 0

      - name: Get previous tag
        if: steps.skip_check.outputs.should_skip != 'true'
        id: prev_tag
        run: |
          echo "::set-output name=prevtag::$(git describe --tags --abbrev=0 HEAD^1)"

      - name: Generate release notes
        if: steps.skip_check.outputs.should_skip != 'true'
        id: generate_notes
        shell: pwsh
        run: |
          $PREV_TAG = "${{ steps.prev_tag.outputs.prevtag }}"
          $CURRENT_TAG = "${{ github.ref_name }}"

          # Set env.CURRENT_TAG for subsequent steps. See
          # https://stackoverflow.com/questions/71333335/github-action-set-github-env-not-saving
          Add-Content -Path ${env:GITHUB_ENV} -Value "CURRENT_TAG=$CURRENT_TAG"

          # Handle first release case
          if ([string]::IsNullOrEmpty($PREV_TAG)) {
              echo "## Initial Release" > RELEASE_NOTES.md
              git log --pretty=format:"- %s ([%h](%H))" >> RELEASE_NOTES.md
              exit 0
          }

          # Validate tags exist
          try {
              git rev-parse "$PREV_TAG" > $null
              git rev-parse "$CURRENT_TAG" > $null
          } catch {
              echo "Error: Invalid tags"
              exit 1
          }

          echo "## Changes since $PREV_TAG" > RELEASE_NOTES.md
          # Format commit messages, handle multi-line messages and escape markdown
          git log --pretty=format:"- %s ([%h](%H))" "$PREV_TAG..$CURRENT_TAG" >> RELEASE_NOTES.md

      - name: Show release notes
        if: steps.skip_check.outputs.should_skip != 'true'
        shell: pwsh
        run: |
          Get-Content .\RELEASE_NOTES.md

      - name: Add MSBuild to PATH
        if: steps.skip_check.outputs.should_skip != 'true'
        uses: microsoft/setup-msbuild@v2

      - name: Set up VSTest Path
        if: steps.skip_check.outputs.should_skip != 'true'
        uses: darenm/Setup-VSTest@v1

      - name: Restore NuGet packages
        if: steps.skip_check.outputs.should_skip != 'true'
        working-directory: ${{env.GITHUB_WORKSPACE}}
        run: nuget restore ${{env.SOLUTION_FILE_PATH}}

      - name: Build
        if: steps.skip_check.outputs.should_skip != 'true'
        working-directory: ${{env.GITHUB_WORKSPACE}}
        # Add additional options to the MSBuild command line here (like platform or verbosity level).
        # See https://docs.microsoft.com/visualstudio/msbuild/msbuild-command-line-reference
        run: msbuild /m /p:Configuration=${{env.BUILD_CONFIGURATION}} /p:Analysis='True' ${{env.SOLUTION_FILE_PATH}}

      - name: Zip the directory
        shell: pwsh
        run: |
          $source = "${{github.workspace}}/GedValidate/bin/${{env.BUILD_CONFIGURATION}}/net6.0/*"
          $destination = "${{github.workspace}}/GedValidate/bin/${{env.BUILD_CONFIGURATION}}/net6.0/Windows-${{env.BUILD_CONFIGURATION}}-GedValidate.zip"
          Compress-Archive -Path $source -DestinationPath $destination

      - name: Run Basic Unit Tests
        if: steps.skip_check.outputs.should_skip != 'true'
        working-directory: ./Tests/bin/${{env.BUILD_CONFIGURATION}}/net6.0
        run: vstest.console.exe Tests.dll /Logger:trx

      - name: Create GitHub Release
        if: steps.skip_check.outputs.should_skip != 'true'
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          body_path: ./RELEASE_NOTES.md
          draft: false
          prerelease: false

      - name: Upload Release Assets
        if: steps.skip_check.outputs.should_skip != 'true'
        uses: actions/upload-release-asset@e8f9f06c4b078e705bd2ea027f0926603fc9b4d5  # v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{github.workspace}}/GedValidate/bin/${{env.BUILD_CONFIGURATION}}/net6.0/Windows-${{env.BUILD_CONFIGURATION}}-GedValidate.zip
          asset_name: Windows-${{env.BUILD_CONFIGURATION}}-GedValidate.zip
          asset_content_type: application/zip
