# Copyright (c) Armidale Software
# SPDX-License-Identifier: MIT
#
# For documentation on the github environment, see
# https://docs.github.com/en/actions/using-github-hosted-runners/about-github-hosted-runners
#
# For documentation on the syntax of this file, see
# https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions
---
name: Release to github
on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'
  workflow_dispatch:

env:
  SOLUTION_FILE_PATH: Gedcom7.sln
  DOTNET_CORE_VERSION: 6.0.x
  BUILD_CONFIGURATION: Release

permissions:
  contents: write

jobs:
  deploy:
    runs-on: windows-2019
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@91182cccc01eb5e619899d80e4e971d6181294a7  # v2.10.1
        with:
          egress-policy: audit

      - id: skip_check
        uses: fkirc/skip-duplicate-actions@v5
        with:
          cancel_others: 'false'
          paths_ignore: '["**.md"]'

      - uses: actions/checkout@eef61447b9ff4aafe5dcd4e0bbf5d482be7e7871  # v4.2.1
        if: steps.skip_check.outputs.should_skip != 'true'
        with:
          submodules: 'recursive'

      - name: Add MSBuild to PATH
        if: steps.skip_check.outputs.should_skip != 'true'
        uses: microsoft/setup-msbuild@v2

      - name: Setup VSTest Path
        if: steps.skip_check.outputs.should_skip != 'true'
        uses: darenm/Setup-VSTest@v1

      - name: Restore NuGet packages
        if: steps.skip_check.outputs.should_skip != 'true'
        working-directory: ${{env.GITHUB_WORKSPACE}}
        run: nuget restore ${{env.SOLUTION_FILE_PATH}}

      - name: Build
        if: steps.skip_check.outputs.should_skip != 'true'
        working-directory: ${{env.GITHUB_WORKSPACE}}
        # Add additional options to the MSBuild command line here (like platform or verbosity level).
        # See https://docs.microsoft.com/visualstudio/msbuild/msbuild-command-line-reference
        run: msbuild /m /p:Configuration=${{env.BUILD_CONFIGURATION}} /p:Analysis='True' ${{env.SOLUTION_FILE_PATH}}

      - name: Run Basic Unit Tests
        if: steps.skip_check.outputs.should_skip != 'true'
        working-directory: ./Tests/bin/${{env.BUILD_CONFIGURATION}}/net6.0
        run: vstest.console.exe Tests.dll /Logger:trx

      - name: Get previous tag
        id: prev_tag
        run: |
          echo "::set-output name=prev-tag::$(git describe --tags --abbrev=0 HEAD^1)"

      - name: Generate release notes
        id: generate_notes
        uses: actions/github-script@v7
        with:
          script: |
            const previousTag = process.env.PREV_TAG;
            const currentTag = context.ref.replace('refs/tags/', '');
            const { data: commits } = await github.repos.compareCommits({
              owner: context.repo.owner,
              repo: context.repo.repo,
              base: previousTag,
              head: currentTag
            });

            let notes = `## Changes since ${previousTag}\n`;
            commits.commits.forEach(commit => {
              notes += `- ${commit.commit.message} ([${commit.sha.substring(0, 7)}](${commit.html_url}))\n`;
            });

            return notes;
        env:
          PREV_TAG: ${{ steps.prev_tag.outputs['prev-tag'] }}

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: ${{ steps.generate_notes.outputs.result }}
          draft: false
          prerelease: false

      - name: Upload Release Assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          path: ${{github.workspace}}/GedValidate/bin/${{env.BUILD_CONFIGURATION}}/net6.0/
          asset_name: Windows ${{env.BUILD_CONFIGURATION}} GedValidate
          asset_content_type: application/zip
