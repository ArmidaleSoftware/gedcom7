# Copyright (c) Armidale Software
# SPDX-License-Identifier: MIT
#
# For documentation on the github environment, see
# https://docs.github.com/en/actions/using-github-hosted-runners/about-github-hosted-runners
#
# For documentation on the syntax of this file, see
# https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions
---
name: MSBuild

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

concurrency:
  # Cancel any builds currently in progress for the same PR.
  # Allow running concurrently for with any other commits.
  group: ci-${{ github.event.pull_request.number || github.sha }}
  cancel-in-progress: true

jobs:
  build:
    strategy:
      matrix:
        configurations: [Debug, Release]
    runs-on: windows-2019
    env:
      # Path to the solution file relative to the root of the project.
      SOLUTION_FILE_PATH: Gedcom7.sln

      # Configuration type to build.
      # You can convert this to a build matrix if you need coverage of multiple configuration types.
      # https://docs.github.com/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
      BUILD_CONFIGURATION: ${{matrix.configurations}}

    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@91182cccc01eb5e619899d80e4e971d6181294a7  # v2.10.1
        with:
          egress-policy: audit

      - id: skip_check
        uses: fkirc/skip-duplicate-actions@v5
        with:
          cancel_others: 'false'
          paths_ignore: '["**.md"]'

      - uses: actions/checkout@eef61447b9ff4aafe5dcd4e0bbf5d482be7e7871  # v4.2.1
        if: steps.skip_check.outputs.should_skip != 'true'
        with:
          submodules: 'recursive'
          # fetch-depth of 0 means to fetch the entire history not just the latest commit,
          # and this is necessary when a workflow is triggered by something other than pushing a tag
          fetch-depth: 0

      - name: Get previous tag
        if: steps.skip_check.outputs.should_skip != 'true'
        id: prev_tag
        run: |
          echo "::set-output name=prevtag::$(git describe --tags --abbrev=0 HEAD^1)"

      - name: DEBUG Show GITHUB_REF
        shell: pwsh
        run: |
          Write-Host "GITHUB_REF: $env:GITHUB_REF"

      # https://stackoverflow.com/questions/71333335/github-action-set-github-env-not-saving
      - name: DEBUG Set CURRENT_TAG environment variable in pwsh
        shell: pwsh
        run: |
          $CURRENT_TAG = $env:GITHUB_REF.Split('/')[-1]
          echo "CURRENT_TAG is $CURRENT_TAG"
          echo "MY_ENV_VAR=myValue" >> $GITHUB_ENV
          Add-Content -Path ${env:GITHUB_ENV} -Value "CURRENT_TAG=$CURRENT_TAG"

      - name: DEBUG Set environment variable in cmd
        shell: cmd
        run: |
          printf "sleep_state2=purple" >> %GITHUB_ENV%

      - name: DEBUG Set in bash
        shell: bash
        run: |
          echo "action_state=yellow" >> $GITHUB_ENV

      - name: DEBUG Show CURRENT_TAG value in pwsh
        shell: pwsh
        run: |
          echo "env action_state is ${{ env.action_state }}"
          echo "env CURRENT_TAG is ${{ env.CURRENT_TAG }}"
          echo "env MY_ENV_VAR is ${{ env.MY_ENV_VAR }}"
          echo "env sleep_state1 is ${{ env.sleep_state1 }}"
          echo "env sleep_state2 is ${{ env.sleep_state2 }}"

      - name: DEBUG Show CURRENT_TAG value in bash
        shell: bash
        run: |
          echo "MY_ENV_VAR is $MY_ENV_VAR"
          echo "CURRENT_TAG is $CURRENT_TAG"
          echo "action_state is $action_state"
          echo "sleep_state1 is $sleep_state1"
          echo "sleep_state2 is $sleep_state2"
          echo "env action_state is ${{ env.action_state }}"
          echo "env CURRENT_TAG is ${{ env.CURRENT_TAG }}"
          echo "env MY_ENV_VAR is ${{ env.MY_ENV_VAR }}"
          echo "env sleep_state1 is ${{ env.sleep_state1 }}"
          echo "env sleep_state2 is ${{ env.sleep_state2 }}"

      - name: DEBUG Show CURRENT_TAG value in cmd
        shell: cmd
        run: |
          echo "MY_ENV_VAR is %MY_ENV_VAR%"
          echo "CURRENT_TAG is %CURRENT_TAG%"
          echo "action_state is %action_state%"
          echo "sleep_state1 is %sleep_state1%"
          echo "sleep_state2 is %sleep_state2%"
          echo "env CURRENT_TAG is ${{ env.CURRENT_TAG }}"
          echo "env MY_ENV_VAR is ${{ env.MY_ENV_VAR }}"
          echo "env action_state is ${{ env.action_state }}"
          echo "env sleep_state1 is ${{ env.sleep_state1 }}"
          echo "env sleep_state2 is ${{ env.sleep_state2 }}"

      - name: DEBUG echo previous tag
        if: steps.skip_check.outputs.should_skip != 'true'
        run: |
          echo "::notice::Previous tag: ${{steps.prev_tag.outputs.prevtag}}"

      - name: DEBUG Generate release notes
        if: steps.skip_check.outputs.should_skip != 'true'
        id: generate_notes
        shell: pwsh
        run: |
          echo "## Initial Release" > RELEASE_NOTES.md
          git log --pretty=format:"- %s ([%h](%H))" >> RELEASE_NOTES.md
          #$PREV_TAG = "${{ steps.prev_tag.outputs.prevtag }}"
          #$CURRENT_TAG = $env:CURRENT_TAG
          #echo "::notice::Previous tag: ${{steps.prev_tag.outputs.prevtag}}"
          #echo "PREV_TAG is $PREV_TAG"
          #echo "CURRENT_TAG is $CURRENT_TAG"
          #echo "## Changes since $PREV_TAG" > RELEASE_NOTES.md
          #git log --pretty=format:"- %s ([%h](%H))" $PREV_TAG..$CURRENT_TAG >> RELEASE_NOTES.md

      - name: DEBUG Show release notes
        if: steps.skip_check.outputs.should_skip != 'true'
        run: |
          type .\RELEASE_NOTES.md

      - name: Add MSBuild to PATH
        if: steps.skip_check.outputs.should_skip != 'true'
        uses: microsoft/setup-msbuild@v2

      - name: Set up VSTest Path
        if: steps.skip_check.outputs.should_skip != 'true'
        uses: darenm/Setup-VSTest@v1

      - name: Restore NuGet packages
        if: steps.skip_check.outputs.should_skip != 'true'
        working-directory: ${{env.GITHUB_WORKSPACE}}
        run: nuget restore ${{env.SOLUTION_FILE_PATH}}

      - name: Build
        if: steps.skip_check.outputs.should_skip != 'true'
        working-directory: ${{env.GITHUB_WORKSPACE}}
        # Add additional options to the MSBuild command line here (like platform or verbosity level).
        # See https://docs.microsoft.com/visualstudio/msbuild/msbuild-command-line-reference
        run: msbuild /m /p:Configuration=${{env.BUILD_CONFIGURATION}} /p:Analysis='True' ${{env.SOLUTION_FILE_PATH}}

      - name: Run Basic Unit Tests
        if: steps.skip_check.outputs.should_skip != 'true'
        working-directory: ./Tests/bin/${{env.BUILD_CONFIGURATION}}/net6.0
        run: vstest.console.exe Tests.dll /Logger:trx

      - name: Validate GEDCOM.io test files
        if: steps.skip_check.outputs.should_skip != 'true'
        working-directory: ${{github.workspace}}/GedValidate/bin/${{env.BUILD_CONFIGURATION}}/net6.0/
        run: |
          .\GedValidate.exe ${{github.workspace}}\external\GEDCOM-registries ${{github.workspace}}\external\GEDCOM-registries\registry_tools\GEDCOM.io\testfiles\gedcom70\

      - name: Dump memory usage
        if: steps.skip_check.outputs.should_skip != 'true'
        working-directory: ./Tests/bin/${{env.BUILD_CONFIGURATION}}/net6.0/TestResults
        run: findstr bytes *.trx

      - name: Upload GedValidate binary
        if: steps.skip_check.outputs.should_skip != 'true'
        uses: actions/upload-artifact@b4b15b8c7c6ac21ea08fcf65892d2ee8f75cf882
        with:
          name: Windows ${{env.BUILD_CONFIGURATION}} GedValidate
          path: ${{github.workspace}}/GedValidate/bin/${{env.BUILD_CONFIGURATION}}/net6.0/
          retention-days: 5
